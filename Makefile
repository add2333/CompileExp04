# Makefile for MiniC Compiler

# --- ANSI colors ---
COLOR_RESET=\033[0m
COLOR_INFO=\033[1;34m
COLOR_OK=\033[1;32m
COLOR_WARN=\033[1;33m

# --- Build Settings ---
SRC_DIR     = .
BUILD_DIR   = ./build
CXX         = clang++
CXXFLAGS    = -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/$(CXX) -G Ninja
MINIC_EXE   = $(BUILD_DIR)/minic
IRCompiler  = ./tools/IRCompiler/Linux-x86_64/Ubuntu-22.04/IRCompiler

# --- ANTLR Settings ---
ANTLR_JAR       = tools/antlr-4.13.2-complete.jar
ANTLR_SRC_DIR   = frontend/antlr4
ANTLR_OUT_DIR   = $(ANTLR_SRC_DIR)/autogenerated
GRAMMAR_FILE    = MiniC.g4

# --- Default Target ---
all: build

# --- Build Project ---
build:
	@echo "$(COLOR_INFO)[BUILD] Configuring cmake...$(COLOR_RESET)"
	@cmake -B $(BUILD_DIR) -S $(SRC_DIR) $(CXXFLAGS)
	@echo "$(COLOR_INFO)[BUILD] Building project with cmake...$(COLOR_RESET)"
	@cmake --build $(BUILD_DIR) --parallel

# --- Run MiniC with Short Commands ---
runmt:
	@echo "$(COLOR_INFO)[MINIC] Generating .png...$(COLOR_RESET)"
	$(MINIC_EXE) -S -T -A -o ./tests/ast/$(ARGS).png ./tests/$(ARGS).c

runmi:
	@echo "$(COLOR_INFO)[MINIC] Generating .ir...$(COLOR_RESET)"
	$(MINIC_EXE) -S -I -A -o ./tests/ir/$(ARGS).ir ./tests/$(ARGS).c

runir:
	@echo "$(COLOR_INFO)[IRCompiler] Compiling IR...$(COLOR_RESET)"
	${IRCompiler} -R ./tests/ir/$(ARGS).ir

runms:
	@echo "$(COLOR_INFO)[MINIC] Generating .s...$(COLOR_RESET)"
	$(MINIC_EXE) -S -A -o ./tests/asm/$(ARGS).s ./tests/$(ARGS).c

runmc: runms
	@echo "$(COLOR_INFO)[MINIC] Generating executable...$(COLOR_RESET)"
	arm-linux-gnueabihf-gcc -static -g -o ./tests/exec/$(ARGS) ./tests/asm/$(ARGS).s ./tests/asm/std.s

runall: build
	@echo "$(COLOR_INFO)[RUNALL] Running all tests...$(COLOR_RESET)"
	@for file in $(shell find ./tests -type f -name 'test*.c'); do \
		base=$$(basename $$file .c);  \
		echo "$(COLOR_INFO)[RUNALL] Processing $$base...$(COLOR_RESET)"; \
		$(MAKE) runmt ARGS=$$base; \
		$(MAKE) runmi ARGS=$$base; \
		$(MAKE) runms ARGS=$$base; \
		$(MAKE) runmc ARGS=$$base; \
    done
	@echo "$(COLOR_OK)[RUNALL] All tests completed.$(COLOR_RESET)"

# --- Generate ANTLR Lexer/Parser ---
antlr4:
	@echo "$(COLOR_INFO)[ANTLR] Cleaning old files...$(COLOR_RESET)"
	rm -rf $(ANTLR_OUT_DIR)/*

	@echo "$(COLOR_INFO)[ANTLR] Copying grammar...$(COLOR_RESET)"
	cp $(ANTLR_SRC_DIR)/$(GRAMMAR_FILE) .

	@echo "$(COLOR_INFO)[ANTLR] Generating lexer and parser...$(COLOR_RESET)"
	java -jar $(ANTLR_JAR) \
		-Dlanguage=Cpp -no-listener -visitor \
		-o $(ANTLR_OUT_DIR) \
		$(GRAMMAR_FILE) >/dev/null

	@echo "$(COLOR_INFO)[ANTLR] Cleaning temp files...$(COLOR_RESET)"
	rm $(GRAMMAR_FILE)

	@echo "$(COLOR_OK)[ANTLR] Generated successfully at $(ANTLR_OUT_DIR)$(COLOR_RESET)"

# --- Packaging ---
package: build
	@echo "$(COLOR_INFO)[PACKAGE] Packaging project...$(COLOR_RESET)"
	cd $(BUILD_DIR) && cpack --config CPackSourceConfig.cmake
	@echo "$(COLOR_OK)[PACKAGE] Project packaged successfully at $(BUILD_DIR)$(COLOR_RESET)"

# --- Clean Build ---
clean: 
	rm -rf $(BUILD_DIR)

# --- Help ---
help:
	@echo "可用的make命令："
	@echo "  make all       - 默认目标，构建项目"
	@echo "  make build     - 构建项目"
	@echo "  make clean     - 清理构建文件"
	@echo "  make runmt     - 运行MiniC并生成AST图像(.png)"
	@echo "  make runmi     - 运行MiniC并生成中间代码(.ir)"
	@echo "  make runir     - 使用IRCompiler编译中间代码(.ir)"
	@echo "  make runms     - 运行MiniC并生成汇编代码(.s)"
	@echo "  make runmc     - 使用arm-linux-gnueabihf-gcc生成可执行文件"
	@echo "  make runall    - 构建并运行所有测试"
	@echo "  make antlr4    - 生成ANTLR词法分析器和语法分析器"
	@echo "  make package   - 打包项目"

.PHONY: all build clean runmt runmi runir runms runmc runall antlr4 help