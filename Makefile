# Makefile for MiniC Compiler

# --- ANSI colors ---
COLOR_RESET=\033[0m
COLOR_INFO=\033[1;34m
COLOR_OK=\033[1;32m
COLOR_WARN=\033[1;33m

# --- Build Settings ---
SRC_DIR     = .
BUILD_DIR   = ./build
CXX         = clang++
CXXFLAGS    = -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/$(CXX) -G Ninja
MINIC_EXE   = $(BUILD_DIR)/minic

# --- ANTLR Settings ---
ANTLR_JAR       = tools/antlr-4.13.2-complete.jar
ANTLR_SRC_DIR   = frontend/antlr4
ANTLR_OUT_DIR   = $(ANTLR_SRC_DIR)/autogenerated
GRAMMAR_FILE    = MiniC.g4

# --- Default Target ---
all: build

# --- Build Project ---
build: 
	@echo "$(COLOR_INFO)[BUILD] Configuring cmake...$(COLOR_RESET)"
	@cmake -B $(BUILD_DIR) -S $(SRC_DIR) $(CXXFLAGS)
	@echo "$(COLOR_INFO)[BUILD] Building project with cmake...$(COLOR_RESET)"
	@cmake --build $(BUILD_DIR) --parallel

# --- Run MiniC with Short Commands ---
runmt: build
	@echo "$(COLOR_INFO)[MINIC] Generating .png...$(COLOR_RESET)"
	$(MINIC_EXE) -S -T -A -o ./tests/test$(ARGS).png ./tests/test$(ARGS).c

runmi: build
	@echo "$(COLOR_INFO)[MINIC] Generating .ir...$(COLOR_RESET)"
	$(MINIC_EXE) -S -I -A -o ./tests/test$(ARGS).ir ./tests/test$(ARGS).c

runms: build
	@echo "$(COLOR_INFO)[MINIC] Generating .s...$(COLOR_RESET)"
	$(MINIC_EXE) -S -A -o ./tests/test$(ARGS).s ./tests/test$(ARGS).c

# --- Generate ANTLR Lexer/Parser ---
antlr4:
	@echo "$(COLOR_INFO)[ANTLR] Cleaning old files...$(COLOR_RESET)"
	rm -rf $(ANTLR_OUT_DIR)/*

	@echo "$(COLOR_INFO)[ANTLR] Copying grammar...$(COLOR_RESET)"
	cp $(ANTLR_SRC_DIR)/$(GRAMMAR_FILE) .

	@echo "$(COLOR_INFO)[ANTLR] Generating lexer and parser...$(COLOR_RESET)"
	java -jar $(ANTLR_JAR) \
		-Dlanguage=Cpp -no-listener -visitor \
		-o $(ANTLR_OUT_DIR) \
		$(GRAMMAR_FILE) >/dev/null

	@echo "$(COLOR_INFO)[ANTLR] Cleaning temp files...$(COLOR_RESET)"
	rm $(GRAMMAR_FILE)

	@echo "$(COLOR_OK)[ANTLR] Generated successfully at $(ANTLR_OUT_DIR)$(COLOR_RESET)"

# --- Clean Build ---
clean:
	rm -rf $(BUILD_DIR)

.PHONY: all build clean runmt runmi runms antlr4